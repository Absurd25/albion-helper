from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QHBoxLayout,
    QPushButton, QMessageBox, QApplication, QDialog
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QImage, QFont
import cv2
import json
import pyautogui
import os
import numpy as np
import sys

from paths import ROOT_DIR
#
from utils.paths import DATA_DIR, TEMPLATES_DIR
#
from modules.screenshot_handler import capture_screen
from modules.template_matcher import find_template_in_image
from utils.logger import setup_logger



class AutoFoodModeWindow(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.main_window = parent
        self.setWindowTitle("Albion Helper ‚Äî –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –ï–¥–∞")
        self.resize(600, 600)
        self.setFixedSize(1300, 400)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        # –õ–æ–≥–≥–µ—Ä
        self.logger = setup_logger()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        self.running = False
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.auto_food_check)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.load_settings()
        self.effects_rect = self.settings.get("–û–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", {})
        self.food_slot_rect = self.settings.get("–°–ª–æ—Ç –µ–¥—ã", {})

        # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω–∞–º –µ–¥—ã
        self.food_templates_dir = os.path.join(TEMPLATES_DIR, "food")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.init_ui()

        # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
        self.update_preview()

        # –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        self.preview_timer = QTimer(self)
        self.preview_timer.timeout.connect(self.update_preview)
        self.preview_timer.start(500)  # –ö–∞–∂–¥—ã–µ 500 –º—Å

    def load_settings(self):
        config_path = os.path.join(ROOT_DIR, "config", "settings.json")
        if not os.path.exists(config_path):
            return {}
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è settings.json: {e}")
            return {}

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # === –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ (–≤–≤–µ—Ä—Ö—É –ø–æ —Ü–µ–Ω—Ç—Ä—É) ===
        self.status_label = QLabel("–ê–≤—Ç–æ-–ø—Ä–æ—Ö–≤–∞—Ç–∫–∞: ‚ùå –í—ã–∫–ª—é—á–µ–Ω")
        self.status_label.setStyleSheet("font-size: 18px; font-weight: bold; color: red;")
        self.status_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(self.status_label)

        # === –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±–ª–∞—Å—Ç–µ–π ===
        effects_title = QLabel("–û–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        effects_title.setFont(QFont("Arial", 12, QFont.Bold))
        food_title = QLabel("–°–ª–æ—Ç –µ–¥—ã:")
        food_title.setFont(QFont("Arial", 12, QFont.Bold))

        # === –ü—Ä–µ–≤—å—é –æ–±–ª–∞—Å—Ç–∏ ===
        preview_layout = QHBoxLayout()
        preview_layout.setSpacing(20)

        # --- –û–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ ---
        effects_layout = QVBoxLayout()
        effects_layout.addWidget(effects_title)
        self.effects_preview = QLabel()
        self.effects_preview.setFixedHeight(250)
        self.effects_preview.setFixedWidth(916)
        self.effects_preview.setStyleSheet("background-color: #f0f0f0; border: 1px solid black;")
        self.effects_preview.setAlignment(Qt.AlignCenter)
        effects_layout.addWidget(self.effects_preview)

        # --- –û–±–ª–∞—Å—Ç—å –µ–¥—ã ---
        food_layout = QVBoxLayout()
        food_layout.addWidget(food_title)
        self.food_preview = QLabel()
        self.food_preview.setFixedHeight(250)
        self.food_preview.setFixedWidth(250)
        self.food_preview.setStyleSheet("background-color: #f0f0f0; border: 1px solid black;")
        self.food_preview.setAlignment(Qt.AlignCenter)
        food_layout.addWidget(self.food_preview)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –æ–±–ª–∞—Å—Ç–∏ —Ä—è–¥–æ–º
        preview_layout.addLayout(effects_layout)
        preview_layout.addLayout(food_layout)

        # === –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===
        control_layout = QHBoxLayout()
        self.toggle_button = QPushButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Ä–µ–∂–∏–º")
        self.toggle_button.clicked.connect(self.toggle_auto_mode)
        close_button = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(self.close)
        control_layout.addWidget(self.toggle_button)
        control_layout.addWidget(close_button)

        # === –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout ===
        main_layout.addLayout(preview_layout)
        main_layout.addLayout(control_layout)
        self.setLayout(main_layout)

    def update_preview(self):
        if not self.effects_rect or not self.food_slot_rect:
            return

        try:
            x_e = int(self.effects_rect.get("x", 0))
            y_e = int(self.effects_rect.get("y", 0))
            w_e = int(self.effects_rect.get("width", 100))
            h_e = int(self.effects_rect.get("height", 100))

            x_f = int(self.food_slot_rect.get("x", 0))
            y_f = int(self.food_slot_rect.get("y", 0))
            w_f = int(self.food_slot_rect.get("width", 100))
            h_f = int(self.food_slot_rect.get("height", 100))
        except (ValueError, TypeError) as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
            return

        img_effects = capture_screen(x_e, y_e, w_e, h_e)
        img_food = capture_screen(x_f, y_f, w_f, h_f)

        if img_effects is None or img_food is None:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–µ–≤—å—é")
            return

        def scale_image(img, target_width, target_height):
            h, w = img.shape[:2]
            scaling_factor = min(target_width / w, target_height / h)
            new_size = (int(w * scaling_factor), int(h * scaling_factor))
            return cv2.resize(img, new_size, interpolation=cv2.INTER_AREA)

        effects_scaled = scale_image(img_effects, self.effects_preview.width(), self.effects_preview.height())
        q_img_effects = QImage(effects_scaled.data, effects_scaled.shape[1], effects_scaled.shape[0],
                               effects_scaled.strides[0], QImage.Format_BGR888)
        self.effects_preview.setPixmap(QPixmap.fromImage(q_img_effects))

        food_scaled = scale_image(img_food, self.food_preview.width(), self.food_preview.height())
        q_img_food = QImage(food_scaled.data, food_scaled.shape[1], food_scaled.shape[0],
                            food_scaled.strides[0], QImage.Format_BGR888)
        self.food_preview.setPixmap(QPixmap.fromImage(q_img_food))

    def auto_food_check(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –µ–¥—ã –∏ –µ—ë —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        """
        if not self.effects_rect or not self.food_slot_rect:
            return

        try:
            x_e = int(self.effects_rect.get("x", 0))
            y_e = int(self.effects_rect.get("y", 0))
            w_e = int(self.effects_rect.get("width", 100))
            h_e = int(self.effects_rect.get("height", 100))

            x_f = int(self.food_slot_rect.get("x", 0))
            y_f = int(self.food_slot_rect.get("y", 0))
            w_f = int(self.food_slot_rect.get("width", 100))
            h_f = int(self.food_slot_rect.get("height", 100))
        except (ValueError, TypeError) as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π: {e}")
            return

        img_effects = capture_screen(x_e, y_e, w_e, h_e)
        if img_effects is None:
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
            return

        found_food = False
        for template_file in os.listdir(self.food_templates_dir):
            if not template_file.lower().endswith((".png", ".jpg")):
                continue

            template_path = os.path.join(self.food_templates_dir, template_file)
            template = cv2.imread(template_path)

            if template is None:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω: {template_path}")
                continue

            match_result = find_template_in_image(img_effects, template)
            if match_result:
                self.logger.info(f"‚úÖ –ï–¥–∞ –Ω–∞–π–¥–µ–Ω–∞: {template_file}")
                found_food = True
                break

        if not found_food:
            self.logger.info("üçΩÔ∏è –ï–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è—é —Å–ª–æ—Ç –µ–¥—ã...")

            img_food_slot = capture_screen(x_f, y_f, w_f, h_f)
            if img_food_slot is None:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–ª–æ—Ç–∞ –µ–¥—ã")
                return

            empty_food_path = os.path.join(TEMPLATES_DIR,"slots", "empty_food_slot.png")
            if not os.path.exists(empty_food_path):
                self.logger.warning("‚ö†Ô∏è –®–∞–±–ª–æ–Ω empty_food_slot.png –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            empty_food_template = cv2.imread(empty_food_path)
            if empty_food_template is None:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω empty_food_slot.png")
                return

            match_result = find_template_in_image(img_food_slot, empty_food_template)
            if match_result:
                self.logger.info("‚ùå –°–ª–æ—Ç –µ–¥—ã –ø—É—Å—Ç")
            else:
                self.logger.info("üü¢ –ï–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ—Ç–µ. –ù–∞–∂–∏–º–∞–µ–º '2'")
                pyautogui.press('2')

    def toggle_auto_mode(self):
        self.running = not self.running
        if self.running:
            self.timer.start(10000)
            self.status_label.setText("–ê–≤—Ç–æ-–ø—Ä–æ—Ö–≤–∞—Ç–∫–∞: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")
            self.status_label.setStyleSheet("font-size: 18px; font-weight: bold; color: green;")
            self.toggle_button.setText("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Ä–µ–∂–∏–º")

            if self.main_window:
                self.main_window.update_food_mode_status(True)

        else:
            self.timer.stop()
            self.status_label.setText("–ê–≤—Ç–æ-–ø—Ä–æ—Ö–≤–∞—Ç–∫–∞: ‚ùå –í—ã–∫–ª—é—á–µ–Ω")
            self.status_label.setStyleSheet("font-size: 18px; font-weight: bold; color: red;")
            self.toggle_button.setText("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Ä–µ–∂–∏–º")

            if self.main_window:
                self.main_window.update_food_mode_status(False)


    def resizeEvent(self, event):
        self.update_preview()
        super().resizeEvent(event)

    def closeEvent(self, event):
        self.timer.stop()
        self.preview_timer.stop()
        self.logger.info("–û–∫–Ω–æ '–ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –ï–¥–∞' –∑–∞–∫—Ä—ã—Ç–æ")
        event.accept()


def main():
    app = QApplication(sys.argv)
    window = AutoFoodModeWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()