# albion_helper/ui/main_window.py

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QComboBox, QApplication, QMessageBox
)

from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QImage, QIcon
import os
import json
import sys
import cv2
import logging
import time
from PyQt5.QtCore import QTimer


# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules.screenshot_handler import capture_screen, resize_image, save_effect_template, find_image_difference


def resource_path(relative_path):
    """ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ .exe """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)


class AlbionHelperMainWindow(QWidget):
    def __init__(self, logger=None):
        super().__init__()
        self.logger = logger or logging.getLogger(
            "AlbionHelperLogger")  # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        self.setWindowTitle("Albion Helper ‚Äî Template Creator")
        self.resize(800, 600)

        # === –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é ===
        self.auto_update_timer = QTimer(self)
        self.auto_update_timer.timeout.connect(self.update_preview)
        self.auto_update_timer.start(500)  # –ö–∞–∂–¥—ã–µ 500 –º—Å (0.5 —Å–µ–∫—É–Ω–¥)

        self.init_ui()

        self.food_mode_active = False
        self.template_1_path = ""
        self.template_2_path = ""
        self.temp_dir = "data/templates/temp"
        os.makedirs(self.temp_dir, exist_ok=True)

    def init_ui(self):
        self.settings_data = self.load_settings()
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # === –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∫–æ–Ω—Ç—Ä–æ–ª—å + –ø—Ä–µ–≤—å—é ===
        top_widget = QWidget()
        top_layout = QHBoxLayout()

        # --- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        control_panel = QWidget()
        control_panel.setFixedSize(250, 300)
        control_layout = QVBoxLayout()

        self.region_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:")
        self.region_combo = QComboBox()
        self.region_combo.addItems([
            "–û–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
            "–°–ª–æ—Ç –µ–¥—ã",
            "–ö—É—Ä—Ç–∫–∞ (R)",
            "–®–ª–µ–º (D)"
        ])

        self.x_input = QLineEdit()
        self.y_input = QLineEdit()
        self.width_input = QLineEdit()
        self.height_input = QLineEdit()

        coords_group = QVBoxLayout()
        coords_group.addWidget(QLabel("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã"))
        coords_group.addLayout(self.create_row("X:", self.x_input))
        coords_group.addLayout(self.create_row("Y:", self.y_input))
        coords_group.addLayout(self.create_row("–®–∏—Ä–∏–Ω–∞:", self.width_input))
        coords_group.addLayout(self.create_row("–í—ã—Å–æ—Ç–∞:", self.height_input))

        # --- –ù–æ–≤–æ–µ –ø–æ–ª–µ ---
        coords_group.addWidget(QLabel("–ò–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞:"))
        self.name_input = QLineEdit()
        coords_group.addLayout(self.create_row("", self.name_input))

        control_layout.addWidget(self.region_label)
        control_layout.addWidget(self.region_combo)

        self.region_combo.currentIndexChanged.connect(self.on_region_changed)

        control_layout.addLayout(coords_group)
        control_layout.addStretch()

        control_panel.setLayout(control_layout)

        # --- –ü—Ä–µ–≤—å—é —Å–ø—Ä–∞–≤–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ, –Ω–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π) ---
        preview_box = QVBoxLayout()

        # –ú–µ—Ç–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–≤—å—é)
        self.preview_label = QLabel("–ü—Ä–µ–≤—å—é –æ–±–ª–∞—Å—Ç–∏:")
        self.preview_label.setStyleSheet("font-weight: bold;")  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω–æ–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è

        # –û–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è)
        self.image_preview = QLabel()
        self.image_preview.setStyleSheet("background-color: lightgray; border: 1px solid black;")
        self.image_preview.setAlignment(Qt.AlignCenter)
        self.image_preview.setMinimumSize(200, 100)
        self.image_preview.setStyleSheet("""
            QLabel {
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                padding: 5px;
            }
        """)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç–∫–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        preview_content_layout = QVBoxLayout()
        preview_content_layout.addWidget(self.preview_label)
        preview_content_layout.addWidget(self.image_preview, stretch=1)

        # –í—Ä–∞–ø–ø–µ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–µ—Ä—Ö–Ω–∏–º –∫—Ä–∞–µ–º
        preview_container = QWidget()
        preview_container.setObjectName("preview-container")
        preview_container.setStyleSheet("""
            #preview-container {
                border: 1px solid #ccc;
                padding: 5px;
                background-color: #f9f9f9;
            }
        """)
        preview_container.setLayout(preview_content_layout)

        # --- –°–±–æ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ ---
        top_layout.addWidget(control_panel, alignment=Qt.AlignTop)
        top_layout.addWidget(preview_container, stretch=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–µ–≤—å—é
        top_widget.setLayout(top_layout)

        # === –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å—Ç–∞—Ç–∏—á–Ω–∞—è –≤–Ω–∏–∑—É) ===
        button_panel = QWidget()
        button_panel.setFixedHeight(60)
        button_layout = QHBoxLayout()

        self.save_region_button = QPushButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å")
        self.save_template_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ç–µ–º–ø–ª–µ–π—Ç")
        self.auto_food_button = QPushButton("üç± –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –ï–¥–∞")
        self.auto_food_button.clicked.connect(self.start_auto_food_mode)

        self.add_food_template_button = QPushButton("üíæ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-—Ç–µ–º–ø–ª–µ–π—Ç –µ–¥—ã")
        self.add_food_template_button.clicked.connect(self.add_last_food_template_to_db)

        # --- –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ layout ---
        button_layout.addWidget(self.save_region_button)
        button_layout.addWidget(self.save_template_button)
        button_layout.addWidget(self.auto_food_button)
        button_layout.addWidget(self.add_food_template_button)

        # --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –Ω–∞ –ø–∞–Ω–µ–ª—å ---
        button_panel.setLayout(button_layout)

        # === –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –µ–¥—ã ===
        self.food_mode_label = QLabel("üç± –†–µ–∂–∏–º –µ–¥—ã: –≤—ã–∫–ª—é—á–µ–Ω")
        self.food_mode_label.setStyleSheet("font-weight: bold; color: gray;")
        main_layout.addWidget(self.food_mode_label, alignment=Qt.AlignLeft)

        # === –°—Ç–∞—Ç—É—Å ===
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ.")
        self.status_label.setStyleSheet("font-size: 14px; padding: 10px;")

        # === –û—Å–Ω–æ–≤–Ω–æ–π layout ===
        main_layout.addWidget(top_widget, stretch=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫ —Å–≤–µ—Ä—Ö—É
        main_layout.addWidget(button_panel)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        main_layout.addWidget(self.status_label)  # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É

        self.setLayout(main_layout)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.save_region_button.clicked.connect(self.save_region)
        self.save_template_button.clicked.connect(self.save_template)

    def create_row(self, label_text, widget):
        row = QHBoxLayout()
        row.addWidget(QLabel(label_text), alignment=Qt.AlignRight)
        row.addWidget(widget)
        return row

    def update_preview(self):
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("–û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            self.logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞: –Ω–µ —á–∏—Å–ª–∞")
            return

        self.logger.info(f"üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é: X={x}, Y={y}, W={width}, H={height}")
        image = capture_screen(x, y, width, height)
        if image is None:
            self.status_label.setText("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
        available_size = self.image_preview.size()

        # –†–µ—Å–∞–π–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        h, w = image.shape[:2]
        scaling_factor = min(available_size.width() / w, available_size.height() / h)
        new_size = (int(w * scaling_factor), int(h * scaling_factor))
        resized_image = cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥ QPixmap
        q_img = QImage(resized_image.data, resized_image.shape[1], resized_image.shape[0],
                       resized_image.strides[0], QImage.Format_BGR888)
        pixmap = QPixmap.fromImage(q_img)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.image_preview.setPixmap(pixmap)
        self.status_label.setText("–ü—Ä–µ–≤—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    def save_region(self):
        region_name = self.region_combo.currentText()
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("–û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        config_path = resource_path(os.path.join("config", "settings.json"))
        if os.path.exists(config_path):
            with open(config_path, "r") as f:
                data = json.load(f)
        else:
            data = {}

        data[region_name] = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": region_name
        }

        with open(config_path, "w") as f:
            json.dump(data, f, indent=4)

        self.status_label.setText(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {region_name}")

    def save_template(self):
        region_name = self.region_combo.currentText()
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("–û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        filename = save_effect_template(x, y, width, height, region_name)
        self.status_label.setText(f"üíæ –¢–µ–º–ø–ª–µ–π—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")

    def save_template_data(self, x, y, width, height, label):
        template_dir = "data/templates/effects"
        os.makedirs(template_dir, exist_ok=True)
        template_file = os.path.join(template_dir, "region_templates.json")

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
        user_name = self.name_input.text().strip()
        if not user_name:
            user_name = label.lower().replace(" ", "_")

        new_data = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": label,
            "name": user_name
        }

        if os.path.exists(template_file):
            with open(template_file, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        exists = any(item["name"] == user_name for item in data)
        if exists:
            self.status_label.setText("‚ö†Ô∏è –¢–µ–º–ø–ª–µ–π—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return False

        data.append(new_data)
        with open(template_file, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        self.status_label.setText(f"‚úÖ –¢–µ–º–ø–ª–µ–π—Ç '{user_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ region_templates.json")
        return True

    def save_food_template(self, x, y, width, height, label="–≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã"):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ–¥—ã –∏ JSON —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        food_dir = "data/templates/food"
        os.makedirs(food_dir, exist_ok=True)

        filename = f"effect_{label.lower().replace(' ', '_')}_{width}x{height}.png"
        full_path = os.path.join(food_dir, filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
        food_image = capture_screen(x, y, width, height)
        cv2.imwrite(full_path, food_image)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        template_file = os.path.join(food_dir, "food_templates.json")

        new_data = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": label,
            "name": label.lower().replace(" ", "_"),
            "template": filename
        }

        if os.path.exists(template_file):
            with open(template_file, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        exists = any(item["name"] == new_data["name"] for item in data)
        if not exists:
            data.append(new_data)
            with open(template_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

        self.status_label.setText(f"üç± –≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã '{label}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    def find_and_save_food_effect(self):
        from modules.screenshot_handler import find_image_difference

        boxes, result_img = find_image_difference(self.img1, self.img2)
        if not boxes:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –µ–¥—ã.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        result_path = os.path.join(self.temp_dir, "food_diff.png")
        cv2.imwrite(result_path, result_img)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ø—Ä–µ–≤—å—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        h, w = result_img.shape[:2]
        resized_result = resize_image(result_img, 400, 200)
        q_img = QImage(resized_result.data, resized_result.shape[1], resized_result.shape[0],
                       resized_result.strides[0], QImage.Format_BGR888)
        pixmap = QPixmap.fromImage(q_img)
        self.image_preview.setPixmap(pixmap)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        reply = QMessageBox.question(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç?",
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ {len(boxes)} –æ–±–ª–∞—Å—Ç—å(–∏) –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ç–µ–º–ø–ª–µ–π—Ç?",
            QMessageBox.Yes | QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            x, y, w, h = boxes[0]
            food_x = self.x + x
            food_y = self.y + y
            food_w = w
            food_h = h

            self.save_food_template(food_x, food_y, food_w, food_h, label="–≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã")
            self.save_template_data(food_x, food_y, food_w, food_h, "–≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã")

            self.status_label.setText("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

    def start_auto_food_mode(self):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ–¥—ã.
        """
        try:
            self.x = int(self.x_input.text())
            self.y = int(self.y_input.text())
            self.width = int(self.width_input.text())
            self.height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è X/Y/W/H")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        reply = QMessageBox.question(
            self,
            "–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç",
            "–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (–±–µ–∑ –µ–¥—ã).\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ 'OK', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            QMessageBox.Ok | QMessageBox.Cancel
        )

        if reply == QMessageBox.Ok:
            self.take_first_screenshot()

    def take_first_screenshot(self):
        self.status_label.setText("üì∏ –î–µ–ª–∞—é –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (–±–µ–∑ –µ–¥—ã)")
        self.img1 = capture_screen(self.x, self.y, self.width, self.height)

        if self.img1 is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return

        cv2.imwrite(os.path.join(self.temp_dir, "before_food.png"), self.img1)

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ —Å—ä–µ—Å—Ç—å –µ–¥—É
        reply = QMessageBox.question(
            self,
            "–°—ä–µ—à—å—Ç–µ –µ–¥—É",
            "–¢–µ–ø–µ—Ä—å —Å—ä–µ—à—å—Ç–µ –µ–¥—É –∏ –Ω–∞–∂–º–∏—Ç–µ OK, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç.",
            QMessageBox.Ok | QMessageBox.Cancel
        )

        if reply == QMessageBox.Ok:
            self.take_second_screenshot()

    def take_second_screenshot(self):
        self.status_label.setText("‚è≥ –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –µ–¥—ã...")
        time.sleep(5)  # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥

        self.status_label.setText("üì∏ –î–µ–ª–∞—é –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç (—Å –µ–¥–æ–π)")
        self.img2 = capture_screen(self.x, self.y, self.width, self.height)

        if self.img2 is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return

        cv2.imwrite(os.path.join(self.temp_dir, "after_food.png"), self.img2)

        self.find_and_save_food_effect()

    def disable_food_mode(self):
        self.food_mode_active = False
        self.food_mode_label.setText("üç± –†–µ–∂–∏–º –µ–¥—ã: –≤—ã–∫–ª—é—á–µ–Ω")
        self.food_mode_label.setStyleSheet("font-weight: bold; color: gray;")

    def load_settings(self):
        config_path = resource_path(os.path.join("config", "settings.json"))
        if os.path.exists(config_path):
            with open(config_path, "r", encoding="utf-8") as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    self.status_label.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è settings.json")
                    return {}
        else:
            self.status_label.setText("‚ö†Ô∏è –§–∞–π–ª settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}

    def apply_region_settings(self, region_name):
        data = self.settings_data.get(region_name, {})
        self.x_input.setText(str(data.get("x", "")))
        self.y_input.setText(str(data.get("y", "")))
        self.width_input.setText(str(data.get("width", "")))
        self.height_input.setText(str(data.get("height", "")))

    def on_region_changed(self):
        selected_region = self.region_combo.currentText()
        self.apply_region_settings(selected_region)


    def add_last_food_template_to_db(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –µ–¥—ã –≤ –ë–î (–µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω)
        """
        if self.last_food_effect is None:
            self.status_label.setText("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        x = self.last_food_effect["x"]
        y = self.last_food_effect["y"]
        width = self.last_food_effect["width"]
        height = self.last_food_effect["height"]
        label = self.last_food_effect["label"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤ region_templates.json)
        success = self.save_template_data(x, y, width, height, label)

        if success:
            self.status_label.setText(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç '{label}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            self.status_label.setText("‚ö†Ô∏è –≠—Ñ—Ñ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

