# albion_helper/ui/main_window.py

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QComboBox, QApplication, QMessageBox, QDialog
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QImage, QIcon
import os
import sys
import json
import cv2
import numpy as np
import logging
import time

import shutil
import re

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules.screenshot_handler import capture_screen
from modules.image_comparer import find_image_difference
from modules.template_generator import save_effect_template

def resource_path(relative_path):
    """ –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ .exe """
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)


class AlbionHelperMainWindow(QWidget):
    def __init__(self, logger=None):
        super().__init__()
        self.logger = logger or logging.getLogger("AlbionHelperLogger")
        self.setWindowTitle("Albion Helper ‚Äî Template Creator")
        self.setWindowIcon(QIcon(resource_path("resources/icon.ico")))
        self.resize(800, 600)

        self.name_input = None

        # === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ-—Ö–∞–≤–∫–∏ ===
        self.auto_food_active = False
        self.food_area = None  # –æ–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ–¥—ã
        self.food_check_timer = QTimer()
        self.food_check_timer.timeout.connect(self.check_food_status)

        # === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º–ø–ª–µ–π—Ç–∞ ===
        self.auto_food_data = {}  # –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        self.temp_dir = "data/templates/temp"
        os.makedirs(self.temp_dir, exist_ok=True)

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
        self.settings_data = self.load_settings()

        # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI ===
        self.init_ui()

        # === –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ ===
        self.apply_region_settings(self.region_combo.currentText())

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # === –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å: –∫–æ–Ω—Ç—Ä–æ–ª—å + –ø—Ä–µ–≤—å—é ===
        top_widget = QWidget()
        top_layout = QHBoxLayout()

        # --- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        control_panel = QWidget()
        control_panel.setFixedSize(250, 300)
        control_layout = QVBoxLayout()

        self.region_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:")
        self.region_combo = QComboBox()
        self.region_combo.addItems([
            "–û–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
            "–°–ª–æ—Ç –µ–¥—ã",
            "–ö—É—Ä—Ç–∫–∞ (R)",
            "–®–ª–µ–º (D)"
        ])

        self.region_combo.currentIndexChanged.connect(self.on_region_changed)

        self.x_input = QLineEdit()
        self.y_input = QLineEdit()
        self.width_input = QLineEdit()
        self.height_input = QLineEdit()

        coords_group = QVBoxLayout()
        coords_group.addWidget(QLabel("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã"))
        coords_group.addLayout(self.create_row("X:", self.x_input))
        coords_group.addLayout(self.create_row("Y:", self.y_input))
        coords_group.addLayout(self.create_row("–®–∏—Ä–∏–Ω–∞:", self.width_input))
        coords_group.addLayout(self.create_row("–í—ã—Å–æ—Ç–∞:", self.height_input))

        coords_group.addWidget(QLabel("–ò–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞:"))
        self.name_input = QLineEdit()
        coords_group.addLayout(self.create_row("", self.name_input))

        control_layout.addWidget(self.region_label)
        control_layout.addWidget(self.region_combo)
        control_layout.addLayout(coords_group)
        control_layout.addStretch()  # –†–∞—Å—Ç—è–∂–∫–∞ –≤–Ω–∏–∑—É
        control_panel.setLayout(control_layout)

        # --- –ü—Ä–µ–≤—å—é —Å–ø—Ä–∞–≤–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ) ---
        preview_box = QVBoxLayout()
        self.preview_label = QLabel("–ü—Ä–µ–≤—å—é –æ–±–ª–∞—Å—Ç–∏:")
        self.preview_label.setStyleSheet("font-weight: bold;")
        self.image_preview = QLabel()
        self.image_preview.setStyleSheet("""
            QLabel {
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                padding: 5px;
            }
        """)
        self.image_preview.setAlignment(Qt.AlignCenter)
        self.image_preview.setMinimumSize(200, 100)

        preview_content_layout = QVBoxLayout()
        preview_content_layout.addWidget(self.preview_label)
        preview_content_layout.addWidget(self.image_preview, stretch=1)

        preview_container = QWidget()
        preview_container.setObjectName("preview-container")
        preview_container.setLayout(preview_content_layout)

        # --- –°–±–æ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ ---
        top_layout.addWidget(control_panel, alignment=Qt.AlignTop)
        top_layout.addWidget(preview_container, stretch=1)
        top_widget = QWidget()
        top_widget.setLayout(top_layout)

        # === –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å—Ç–∞—Ç–∏—á–Ω–∞—è –≤–Ω–∏–∑—É) ===
        button_panel = QWidget()
        button_panel.setFixedHeight(60)
        button_layout = QHBoxLayout()

        self.save_region_button = QPushButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–ª–∞—Å—Ç—å")
        self.save_template_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ç–µ–º–ø–ª–µ–π—Ç")

        self.auto_food_button = QPushButton("üç± –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞")
        self.auto_food_button.clicked.connect(self.toggle_auto_eat)

        self.add_food_template_button = QPushButton("üíæ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-—Ç–µ–º–ø–ª–µ–π—Ç –µ–¥—ã")
        self.add_food_template_button.clicked.connect(self.start_add_food_template_mode)
        self.save_template_button.clicked.connect(self.save_template)

        button_layout.addWidget(self.save_region_button)
        button_layout.addWidget(self.save_template_button)
        button_layout.addWidget(self.auto_food_button)
        button_layout.addWidget(self.add_food_template_button)
        button_panel.setLayout(button_layout)

        # === –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ –µ–¥—ã ===
        self.food_mode_label = QLabel("üç± –†–µ–∂–∏–º –µ–¥—ã: –≤—ã–∫–ª—é—á–µ–Ω")
        self.food_mode_label.setStyleSheet("font-weight: bold; color: gray;")
        main_layout.addWidget(self.food_mode_label, alignment=Qt.AlignLeft)

        # === –°—Ç–∞—Ç—É—Å ===
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ.")
        self.status_label.setStyleSheet("font-size: 14px; padding: 10px;")

        # === –û—Å–Ω–æ–≤–Ω–æ–π layout ===
        main_layout.addWidget(top_widget, stretch=1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫ —Å–≤–µ—Ä—Ö—É
        main_layout.addWidget(button_panel)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        main_layout.addWidget(self.status_label)  # –°—Ç–∞—Ç—É—Å –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
        self.setLayout(main_layout)

        # === –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é ===
        self.auto_update_timer = QTimer(self)
        self.auto_update_timer.timeout.connect(self.update_preview)
        self.auto_update_timer.start(250)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 4 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É

    def create_row(self, label_text, widget):
        row = QHBoxLayout()
        row.addWidget(QLabel(label_text), alignment=Qt.AlignRight)
        row.addWidget(widget)
        return row

    def update_preview(self):
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("–û—à–∏–±–∫–∞: –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return

        image = capture_screen(x, y, width, height)
        if image is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
            return

        available_size = self.image_preview.size()
        h, w = image.shape[:2]
        scaling_factor = min(available_size.width() / w, available_size.height() / h)
        new_size = (int(w * scaling_factor), int(h * scaling_factor))
        resized_image = cv2.resize(image, new_size, interpolation=cv2.INTER_AREA)

        q_img = QImage(resized_image.data, resized_image.shape[1], resized_image.shape[0],
                       resized_image.strides[0], QImage.Format_BGR888)
        pixmap = QPixmap.fromImage(q_img)
        self.image_preview.setPixmap(pixmap)

    def start_add_food_template_mode(self):
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è X/Y/W/H")
            return

        reply = QMessageBox.question(
            self,
            "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-—Ç–µ–º–ø–ª–µ–π—Ç –µ–¥—ã",
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ–¥–∞ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ OK, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç.",
            QMessageBox.Ok | QMessageBox.Cancel
        )
        if reply != QMessageBox.Ok:
            return

        # –ü–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        self.first_screenshot = capture_screen(x, y, width, height)
        if self.first_screenshot is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        first_path = os.path.join(self.temp_dir, "before_food.png")
        cv2.imwrite(first_path, self.first_screenshot)

        reply = QMessageBox.information(
            self,
            "–°—ä–µ—à—å—Ç–µ –µ–¥—É",
            "–¢–µ–ø–µ—Ä—å —Å—ä–µ—à—å—Ç–µ –µ–¥—É –∏ –Ω–∞–∂–º–∏—Ç–µ OK,\n"
            "—á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.",
            QMessageBox.Ok | QMessageBox.Cancel
        )
        if reply != QMessageBox.Ok:
            return

        self.status_label.setText("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º...")
        QTimer.singleShot(5000, lambda: self.make_second_screenshot(x, y, width, height))

    def make_second_screenshot(self, x, y, width, height):
        self.status_label.setText("üì∏ –î–µ–ª–∞—é –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        second_img = capture_screen(x, y, width, height)

        if second_img is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        second_path = os.path.join(self.temp_dir, "after_food.png")
        cv2.imwrite(second_path, second_img)

        self.status_label.setText("üîç –°—Ä–∞–≤–Ω–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        try:
            boxes, result_img = find_image_difference(self.first_screenshot, second_img)
        except Exception as e:
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return

        if not boxes:
            self.status_label.setText("‚ùå –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        diff_path = os.path.join(self.temp_dir, "food_diff.png")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if result_img is None or result_img.size == 0:
            self.status_label.setText("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–π")
            return

        cv2.imwrite(diff_path, result_img)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        self.show_preview_window(diff_path)

    def save_food_template(self, x, y, width, height, label="–≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã", user_name=None, save_dir=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º–ø–ª–µ–π—Ç –µ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
        if save_dir is None:
            save_dir = os.path.join("data", "templates", "food")
        os.makedirs(save_dir, exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞
        if not user_name:
            last_number = self.get_last_template_index()
            user_name = f"—Ç–µ–º–ø–ª–µ–π—Ç_–µ–¥—ã_{last_number + 1}"
        filename = f"effect_{user_name}_{width}x{height}.png"
        full_path = os.path.join(save_dir, filename)

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        food_image = capture_screen(x, y, width, height)
        if food_image is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –µ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        cv2.imwrite(full_path, food_image)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        template_file = os.path.join(save_dir, "food_templates.json")
        new_data = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": label,
            "name": user_name,
            "template": filename
        }

        if os.path.exists(template_file):
            with open(template_file, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        exists = any(item["name"] == user_name for item in data)
        if not exists:
            data.append(new_data)
            with open(template_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

        self.status_label.setText(f"üç± –¢–µ–º–ø–ª–µ–π—Ç '{user_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}")
        self.food_area = {"x": x, "y": y, "width": width, "height": height}

    def toggle_auto_eat(self):
        if self.food_area is None:
            self.status_label.setText("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–º–ø–ª–µ–π—Ç–∞ –µ–¥—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
            return

        if self.auto_food_active:
            self.auto_food_active = False
            self.food_check_timer.stop()
            self.auto_food_button.setText("üç¥ –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞: –≤—ã–∫–ª")
            self.status_label.setText("üõë –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            interval = 10000  # 10 —Å–µ–∫—É–Ω–¥
            self.food_check_timer.start(interval)
            self.auto_food_active = True
            self.auto_food_button.setText("üç¥ –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞: –≤–∫–ª")
            self.status_label.setText("üü¢ –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)")

    def check_food_status(self):
        x = self.food_area["x"]
        y = self.food_area["y"]
        w = self.food_area["width"]
        h = self.food_area["height"]

        current_img = capture_screen(x, y, w, h)
        if current_img is None:
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –µ–¥—ã")
            return

        avg_color = np.mean(cv2.cvtColor(current_img, cv2.COLOR_BGR2GRAY))
        if avg_color < 10:
            self.status_label.setText("üçΩÔ∏è –ï–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–∂–∏–º–∞—é '2'...")
            from pyautogui import press
            press('2')
            time.sleep(5)
            self.status_label.setText("‚úÖ –ï–¥–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞")

    def save_region(self):
        region_name = self.region_combo.currentText()
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è X/Y/W/H")
            return

        config_path = resource_path(os.path.join("config", "settings.json"))
        if os.path.exists(config_path):
            with open(config_path, "r") as f:
                data = json.load(f)
        else:
            data = {}

        data[region_name] = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": region_name
        }

        with open(config_path, "w") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        self.status_label.setText(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {region_name}")

    def load_settings(self):
        config_path = resource_path(os.path.join("config", "settings.json"))
        if os.path.exists(config_path):
            with open(config_path, "r", encoding="utf-8") as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    return {}
        return {}

    def apply_region_settings(self, region_name):
        data = self.settings_data.get(region_name, {})
        self.x_input.setText(str(data.get("x", "")))
        self.y_input.setText(str(data.get("y", "")))
        self.width_input.setText(str(data.get("width", "")))
        self.height_input.setText(str(data.get("height", "")))

    def on_region_changed(self):
        selected_region = self.region_combo.currentText()
        self.apply_region_settings(selected_region)

    def save_template(self):
        region_name = self.region_combo.currentText()
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            width = int(self.width_input.text())
            height = int(self.height_input.text())
        except ValueError:
            self.status_label.setText("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            return

        filename = save_effect_template(x, y, width, height, region_name)
        self.status_label.setText(f"üíæ –¢–µ–º–ø–ª–µ–π—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
        self.save_template_data(x, y, width, height, region_name)

    def save_template_data(self, x, y, width, height, label):
        template_dir = "data/templates/effects"
        os.makedirs(template_dir, exist_ok=True)
        template_file = os.path.join(template_dir, "region_templates.json")

        user_name = label.lower().replace(" ", "_")

        new_data = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": label,
            "name": user_name
        }

        if os.path.exists(template_file):
            with open(template_file, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        exists = any(item["name"] == user_name for item in data)
        if not exists:
            data.append(new_data)
            with open(template_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

        self.status_label.setText(f"‚úÖ –¢–µ–º–ø–ª–µ–π—Ç '{label}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ region_templates.json")

    def filter_valid_boxes(self, boxes):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏."""
        valid_boxes = []
        for box in boxes:
            x, y, w, h = box
            contour = np.array([[x, y], [x + w, y], [x + w, y + h], [x, y + h]])
            approx = cv2.approxPolyDP(contour, 0.04 * cv2.arcLength(contour, True), True)

            # –ï—Å–ª–∏ –∫–æ–Ω—Ç—É—Ä –∏–º–µ–µ—Ç –±–æ–ª–µ–µ 4 —Ç–æ—á–µ–∫, —ç—Ç–æ –Ω–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            if len(approx) > 4:
                valid_boxes.append(box)

        return valid_boxes

    def show_preview_window(self, diff_image_path):
        if not os.path.exists(diff_image_path):
            self.status_label.setText("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        preview_dialog = QDialog(self)
        layout = QVBoxLayout()

        label = QLabel("üîç –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:")
        layout.addWidget(label)

        # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
        pixmap = QPixmap(diff_image_path)
        if pixmap.isNull():
            self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            preview_dialog.accept()
            return

        image_label = QLabel()
        image_label.setPixmap(pixmap.scaledToWidth(600, Qt.SmoothTransformation))
        image_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(image_label)

        # --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ---
        button_layout = QHBoxLayout()
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ç–µ–º–ø–ª–µ–π—Ç")
        close_btn = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")

        save_btn.clicked.connect(lambda: self.save_food_template_from_preview(diff_image_path))
        close_btn.clicked.connect(preview_dialog.accept)

        button_layout.addWidget(save_btn)
        button_layout.addWidget(close_btn)
        layout.addLayout(button_layout)

        preview_dialog.setLayout(layout)
        preview_dialog.setWindowTitle("–ü—Ä–µ–≤—å—é: –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        preview_dialog.resize(700, 500)
        preview_dialog.exec_()

    def save_food_template_from_preview(self, image_path):
        if not os.path.exists(image_path):
            self.status_label.setText("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        try:
            food_image = cv2.imread(image_path)
            if food_image is None:
                self.status_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return

            x, y, w, h = self.get_coords_from_filename(image_path)
            self.save_food_template(x, y, w, h, label="–≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã", user_name=None)

        except Exception as e:
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º–ø–ª–µ–π—Ç–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–º–ø–ª–µ–π—Ç–∞ –∏–∑ –ø—Ä–µ–≤—å—é: {e}")

    def get_coordinates_from_image_path(self, image_path):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        filename = os.path.basename(image_path)
        match = re.match(r"effect_([^_]+)_(\d+)x(\d+)\.png", filename)
        if match:
            name = match.group(1)
            width = int(match.group(2))
            height = int(match.group(3))
            return self.food_area["x"], self.food_area["y"], width, height
        raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–µ–º–ø–ª–µ–π—Ç–∞")

    def move_to_blacklist(self, image_path):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ blacklist."""
        blacklist_dir = os.path.join("data", "templates", "food", "blacklist")
        os.makedirs(blacklist_dir, exist_ok=True)

        filename = os.path.basename(image_path)
        dest_path = os.path.join(blacklist_dir, filename)

        try:
            shutil.move(image_path, dest_path)
            self.status_label.setText(f"üö´ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ blacklist: {dest_path}")
        except Exception as e:
            self.status_label.setText(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ blacklist: {e}")

    def get_coords_from_filename(self, path):
        base_name = os.path.basename(path)
        match = re.search(r'effect_([^_]+)_(\d+)x(\d+)\.png', base_name)

        if match:
            width = int(match.group(2))
            height = int(match.group(3))
            return self.x, self.y, width, height  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è –∏–∑ —Ñ–∞–π–ª–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –≤–∑—è—Ç—å –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
        try:
            x = int(self.x_input.text())
            y = int(self.y_input.text())
            w = int(self.width_input.text())
            h = int(self.height_input.text())
            return x, y, w, h
        except ValueError:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –Ω–∏ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞")