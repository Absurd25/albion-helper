# albion_helper/modules/food_detector.py

import os
import json
import cv2
import numpy as np
import pyautogui
import time
from modules.screenshot_handler import capture_screen, find_image_difference


class FoodDetector:
    def __init__(self, logger=None):
        self.logger = logger or self._setup_fallback_logger()
        self.food_area = None  # –æ–±–ª–∞—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ–¥—ã
        self.auto_food_active = False
        self.temp_dir = "data/templates/temp"
        os.makedirs(self.temp_dir, exist_ok=True)

    def _setup_fallback_logger(self):
        """–ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –ª–æ–≥–≥–µ—Ä ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π"""
        import logging
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S"
        )
        return logging.getLogger("FoodDetectorLogger")

    def capture_first_screenshot(self, x, y, width, height):
        """
        –î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç (–±–µ–∑ –µ–¥—ã)
        """
        self.logger.info(f"üì∏ –ü–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: X={x}, Y={y}, W={width}, H={height}")
        self.first_screenshot = capture_screen(x, y, width, height)

        if self.first_screenshot is None:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
            return None

        cv2.imwrite(os.path.join(self.temp_dir, "before_food.png"), self.first_screenshot)
        self.logger.info("‚úÖ –ü–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        return {"area": (x, y, width, height)}

    def capture_second_screenshot(self, data):
        """
        –î–µ–ª–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø–µ—Ä–≤—ã–º
        """
        x, y, w, h = data["area"]
        self.logger.info("üì∏ –í—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç: —Å –µ–¥–æ–π")
        second_img = capture_screen(x, y, w, h)

        if second_img is None:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
            return None

        boxes, result_img = find_image_difference(data["first_img"], second_img)
        result_path = os.path.join(self.temp_dir, "food_diff.png")
        cv2.imwrite(result_path, result_img)

        if not boxes:
            self.logger.warning("‚ùå –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(boxes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ")
        food_x = x + boxes[0][0]
        food_y = y + boxes[0][1]
        food_w = boxes[0][2]
        food_h = boxes[0][3]

        return {
            "x": food_x,
            "y": food_y,
            "width": food_w,
            "height": food_h
        }

    def save_food_template(self, x, y, width, height, label="–≠—Ñ—Ñ–µ–∫—Ç –µ–¥—ã", user_name=None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–º–ø–ª–µ–π—Ç –µ–¥—ã –≤ –ø–∞–ø–∫—É –∏ JSON
        """
        food_dir = "data/templates/food"
        os.makedirs(food_dir, exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–º–ø–ª–µ–π—Ç–∞
        if not user_name:
            last_number = self.get_last_template_index()
            user_name = f"—Ç–µ–º–ø–ª–µ–π—Ç_–µ–¥—ã_{last_number + 1}"

        filename = f"effect_{user_name}_{width}x{height}.png"
        full_path = os.path.join(food_dir, filename)

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        food_image = capture_screen(x, y, width, height)
        cv2.imwrite(full_path, food_image)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        template_file = os.path.join(food_dir, "food_templates.json")
        new_data = {
            "x": x,
            "y": y,
            "width": width,
            "height": height,
            "label": label,
            "name": user_name,
            "template": filename
        }

        if os.path.exists(template_file):
            with open(template_file, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                except json.JSONDecodeError:
                    data = []
        else:
            data = []

        exists = any(item["name"] == user_name for item in data)
        if exists:
            self.logger.warning(f"‚ö†Ô∏è –¢–µ–º–ø–ª–µ–π—Ç '{user_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        data.append(new_data)
        with open(template_file, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        self.logger.info(f"üç± –¢–µ–º–ø–ª–µ–π—Ç '{user_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}")
        self.food_area = {
            "x": x,
            "y": y,
            "width": width,
            "height": height
        }
        return True

    def get_last_template_index(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å '—Ç–µ–º–ø–ª–µ–π—Ç_–µ–¥—ã_X'
        """
        template_file = os.path.join("data/templates/food", "food_templates.json")
        max_index = 0

        if os.path.exists(template_file):
            with open(template_file, "r", encoding="utf-8") as f:
                try:
                    data = json.load(f)
                    for item in data:
                        name = item.get("name", "")
                        if name.startswith("—Ç–µ–º–ø–ª–µ–π—Ç_–µ–¥—ã_"):
                            suffix = name.replace("—Ç–µ–º–ø–ª–µ–π—Ç_–µ–¥—ã_", "")
                            if suffix.isdigit():
                                max_index = max(int(suffix), max_index)
                except json.JSONDecodeError:
                    pass

        return max_index

    def check_food_status(self, area=None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å —ç—Ñ—Ñ–µ–∫—Ç –µ–¥—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """
        area = area or self.food_area
        if not area:
            return False

        x, y, w, h = area["x"], area["y"], area["width"], area["height"]
        current_img = capture_screen(x, y, w, h)

        if current_img is None:
            self.logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –µ–¥—ã")
            return False

        avg_color = np.mean(cv2.cvtColor(current_img, cv2.COLOR_BGR2GRAY))
        self.logger.info(f"üåô –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å: {avg_color:.2f}")

        return avg_color < 10  # –µ—Å–ª–∏ —è—Ä–∫–æ—Å—Ç—å –º–µ–Ω—å—à–µ 10 ‚Üí –Ω–µ—Ç –µ–¥—ã

    def auto_eat_loop(self, interval_ms=10000):
        """
        –¶–∏–∫–ª –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –µ–¥—ã
        """
        while self.auto_food_active:
            if self.check_food_status():
                self.logger.info("üçΩÔ∏è –ï–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–∂–∏–º–∞—é '2'...")
                pyautogui.press('2')
                time.sleep(5)  # –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç
            time.sleep(interval_ms / 1000)

    def toggle_auto_eat(self, active):
        self.auto_food_active = active
        if active:
            self.logger.info("üç¥ –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–æ")
        else:
            self.logger.info("üõë –ê–≤—Ç–æ-—Ö–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
